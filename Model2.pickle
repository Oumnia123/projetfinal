{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e6a66d74",
   "metadata": {},
   "source": [
    "## Decision Tree with original data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b027583e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas import read_csv\n",
    "from sklearn.model_selection import train_test_split # Splitting technique\n",
    "from sklearn.linear_model import DecisonTree# Algorithm, classifier, model\n",
    "from sklearn.metrics import confusion_matrix\n",
    "# Import dataset\n",
    "filename = 'pima-indians-diabetes.data.csv'\n",
    "attributs = ['preg', 'plas', 'pres', 'skin', 'test', 'mas', 'pedi', 'age', 'class']\n",
    "data = read_csv(filename, delimiter=\",\", names=attributs)\n",
    "#print(data)\n",
    "# Dataframe values\n",
    "array = data.values\n",
    "# Define inputs (X) and output (Y)\n",
    "X = array[ : , 0 : -1]\n",
    "Y = array[ : , -1]\n",
    "\n",
    "test_proportion = 0.30\n",
    "seed = 1000\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_proportion, random_state= seed)\n",
    "\n",
    "# Training\n",
    "model = DecisonTree()\n",
    "model.fit(X_train, Y_train) # Training, apprentissage\n",
    "# Peformance Evaluation\n",
    "result = model.score(X_test, Y_test)\n",
    "print(\"Accuracy: %.3f%%\" % (result))\n",
    "# Confusion Matrix\n",
    "predicted = model.predict(X_test)\n",
    "matrix = confusion_matrix(Y_test, predicted)\n",
    "print(\"Confusion Matrix\\n---------------\\n\", matrix)\n",
    "TN = matrix[0][0]\n",
    "FP = matrix[0][1]\n",
    "FN = matrix[1][0]\n",
    "TP = matrix[1][1]\n",
    "#print(TP, FP, FN, TN)\n",
    "accuracy = (TP + TN) / (TP + FP + FN + TN)\n",
    "recall = TP / (FN + TP)\n",
    "precision = TP / (TP + FP)\n",
    "specificity = TN / (TN + FP)\n",
    "f1 = 2*precision*recall / (precision + recall)\n",
    "print(\"Accuracy: %s \"% (accuracy*100))\n",
    "print(\"Recall: %s \"% (recall*100))\n",
    "print(\"Precision: %s \"% (precision*100))\n",
    "print(\"Specificity: %s \"% (specificity*100))\n",
    "print(\"F1-Score: %s \"% (f1*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a2c7a53",
   "metadata": {},
   "source": [
    "## With Standard Scaler data transform"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ad30133",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas import read_csv\n",
    "from sklearn.model_selection import train_test_split # Splitting technique\n",
    "from sklearn.linear_model import DecisonTree# Algorithm, classifier, model\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "# Import dataset\n",
    "filename = 'pima-indians-diabetes.data.csv'\n",
    "attributs = ['preg', 'plas', 'pres', 'skin', 'test', 'mas', 'pedi', 'age', 'class']\n",
    "data = read_csv(filename, delimiter=\",\", names=attributs)\n",
    "#print(data)\n",
    "# Dataframe values\n",
    "array = data.values\n",
    "# Define inputs (X) and output (Y)\n",
    "X = array[ : , 0 : -1]\n",
    "Y = array[ : , -1]\n",
    "scaler=StandardScaler() ##each value will range 0et 1\n",
    "rescaledX=scaler.fit_transform(X)\n",
    "test_proportion = 0.30\n",
    "seed = 1000\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(rescaledX, Y, test_size=test_proportion, random_state= seed)\n",
    "\n",
    "# Training\n",
    "model = DecisonTree()\n",
    "model.fit(X_train, Y_train) # Training, apprentissage\n",
    "# Peformance Evaluation\n",
    "result = model.score(X_test, Y_test)\n",
    "print(\"Accuracy: %.3f%%\" % (result))\n",
    "# Confusion Matrix\n",
    "predicted = model.predict(X_test)\n",
    "matrix = confusion_matrix(Y_test, predicted)\n",
    "print(\"Confusion Matrix\\n---------------\\n\", matrix)\n",
    "TN = matrix[0][0]\n",
    "FP = matrix[0][1]\n",
    "FN = matrix[1][0]\n",
    "TP = matrix[1][1]\n",
    "#print(TP, FP, FN, TN)\n",
    "accuracy = (TP + TN) / (TP + FP + FN + TN)\n",
    "recall = TP / (FN + TP)\n",
    "precision = TP / (TP + FP)\n",
    "specificity = TN / (TN + FP)\n",
    "f1 = 2*precision*recall / (precision + recall)\n",
    "print(\"Accuracy: %s \"% (accuracy*100))\n",
    "print(\"Recall: %s \"% (recall*100))\n",
    "print(\"Precision: %s \"% (precision*100))\n",
    "print(\"Specificity: %s \"% (specificity*100))\n",
    "print(\"F1-Score: %s \"% (f1*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16ba27a0",
   "metadata": {},
   "source": [
    "## With Min Max Scaler data transform"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93ab9158",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "X=array[ : , 0: -1]\n",
    "Y=array[ : ,-1]\n",
    "scaler=MinMaxScaler(feature_range=(0,1)) ##each value will range 0entre 1\n",
    "rescaledX=scaler.fit_transform(X)\n",
    "print('Rescaled inputs \\n--------')\n",
    "print(rescaledX.round(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67ddf1cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas import read_csv\n",
    "from sklearn.model_selection import train_test_split # Splitting technique\n",
    "from sklearn.linear_model import DecisonTree# Algorithm, classifier, model\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "# Import dataset\n",
    "filename = 'pima-indians-diabetes.data.csv'\n",
    "attributs = ['preg', 'plas', 'pres', 'skin', 'test', 'mas', 'pedi', 'age', 'class']\n",
    "data = read_csv(filename, delimiter=\",\", names=attributs)\n",
    "#print(data)\n",
    "# Dataframe values\n",
    "array = data.values\n",
    "# Define inputs (X) and output (Y)\n",
    "X = array[ : , 0 : -1]\n",
    "Y = array[ : , -1]\n",
    "scaler=MinMaxScaler() ##each value will range 0et 1\n",
    "rescaledX=scaler.fit_transform(X)\n",
    "test_proportion = 0.30\n",
    "seed = 1000\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(rescaledX, Y, test_size=test_proportion, random_state= seed)\n",
    "\n",
    "# Training\n",
    "model = DecisonTree()\n",
    "model.fit(X_train, Y_train) # Training, apprentissage\n",
    "# Peformance Evaluation\n",
    "result = model.score(X_test, Y_test)\n",
    "print(\"Accuracy: %.3f%%\" % (result))\n",
    "# Confusion Matrix\n",
    "predicted = model.predict(X_test)\n",
    "matrix = confusion_matrix(Y_test, predicted)\n",
    "print(\"Confusion Matrix\\n---------------\\n\", matrix)\n",
    "TN = matrix[0][0]\n",
    "FP = matrix[0][1]\n",
    "FN = matrix[1][0]\n",
    "TP = matrix[1][1]\n",
    "#print(TP, FP, FN, TN)\n",
    "accuracy = (TP + TN) / (TP + FP + FN + TN)\n",
    "recall = TP / (FN + TP)\n",
    "precision = TP / (TP + FP)\n",
    "specificity = TN / (TN + FP)\n",
    "f1 = 2*precision*recall / (precision + recall)\n",
    "print(\"Accuracy: %s \"% (accuracy*100))\n",
    "print(\"Recall: %s \"% (recall*100))\n",
    "print(\"Precision: %s \"% (precision*100))\n",
    "print(\"Specificity: %s \"% (specificity*100))\n",
    "print(\"F1-Score: %s \"% (f1*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99fdd45a",
   "metadata": {},
   "source": [
    "## with normalizer data transform"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e56584d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import Normalizer\n",
    "X=array[ : , 0: -1]\n",
    "Y=array[ : ,-1]\n",
    "scaler=Normalizer() ##each value will range 0et 1\n",
    "rescaledX=scaler.fit_transform(X)\n",
    "print('Rescaled inputs \\n--------')\n",
    "print(rescaledX.round(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5977fde",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas import read_csv\n",
    "from sklearn.model_selection import train_test_split # Splitting technique\n",
    "from sklearn.linear_model import DecisonTree# Algorithm, classifier, model\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.preprocessing import Normalizer\n",
    "# Import dataset\n",
    "filename = 'pima-indians-diabetes.data.csv'\n",
    "attributs = ['preg', 'plas', 'pres', 'skin', 'test', 'mas', 'pedi', 'age', 'class']\n",
    "data = read_csv(filename, delimiter=\",\", names=attributs)\n",
    "#print(data)\n",
    "# Dataframe values\n",
    "array = data.values\n",
    "# Define inputs (X) and output (Y)\n",
    "X = array[ : , 0 : -1]\n",
    "Y = array[ : , -1]\n",
    "scaler=Normalizer() ##each value will range 0et 1\n",
    "rescaledX=scaler.fit_transform(X)\n",
    "test_proportion = 0.30\n",
    "seed = 1000\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(rescaledX, Y, test_size=test_proportion, random_state= seed)\n",
    "\n",
    "# Training\n",
    "model = DecisonTree()\n",
    "model.fit(X_train, Y_train) # Training, apprentissage\n",
    "# Peformance Evaluation\n",
    "result = model.score(X_test, Y_test)\n",
    "print(\"Accuracy: %.3f%%\" % (result))\n",
    "# Confusion Matrix\n",
    "predicted = model.predict(X_test)\n",
    "matrix = confusion_matrix(Y_test, predicted)\n",
    "print(\"Confusion Matrix\\n---------------\\n\", matrix)\n",
    "TN = matrix[0][0]\n",
    "FP = matrix[0][1]\n",
    "FN = matrix[1][0]\n",
    "TP = matrix[1][1]\n",
    "#print(TP, FP, FN, TN)\n",
    "accuracy = (TP + TN) / (TP + FP + FN + TN)\n",
    "recall = TP / (FN + TP)\n",
    "precision = TP / (TP + FP)\n",
    "specificity = TN / (TN + FP)\n",
    "f1 = 2*precision*recall / (precision + recall)\n",
    "print(\"Accuracy: %s \"% (accuracy*100))\n",
    "print(\"Recall: %s \"% (recall*100))\n",
    "print(\"Precision: %s \"% (precision*100))\n",
    "print(\"Specificity: %s \"% (specificity*100))\n",
    "print(\"F1-Score: %s \"% (f1*100))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0 (tags/v3.9.0:9cf6752, Oct  5 2020, 15:34:40) [MSC v.1927 64 bit (AMD64)]"
  },
  "vscode": {
   "interpreter": {
    "hash": "e216885222e8805648b7002761ea3df6ece0c60ebb9a3fdb44a773e9165085af"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
